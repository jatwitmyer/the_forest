{"ast":null,"code":"var _jsxFileName = \"/home/jessica/Development/code/phase-5/the_forest/client/src/components/CharacterSelect.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport UserCharacterCard from \"./UserCharacterCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CharacterSelect({\n  user,\n  setSelectedCharacter\n}) {\n  _s();\n  const [showNewCharacterForm, setShowNewCharacterForm] = useState(false);\n  const [name, setName] = useState('');\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // console.log(user.characters)\n  const userCharacterCards = user.characters.map(character => /*#__PURE__*/_jsxDEV(UserCharacterCard, {\n    character: character,\n    setSelectedCharacter: setSelectedCharacter\n  }, character.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 64\n  }, this));\n  function handleNewCharacter(e) {\n    e.preventDefault();\n    setIsLoading(true);\n    fetch(\"/characters\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name\n      })\n    }).then(r => {\n      setIsLoading(false);\n      if (r.ok) {\n        r.json().then(user => onLogin(user));\n      } else {\n        r.json().then(err => setErrors(err.errors));\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"account\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Playthroughs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), userCharacterCards, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setShowNewCharacterForm(true),\n      children: \"New Playthrough\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), showNewCharacterForm ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-character-form-div\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"new-character-form\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(CharacterSelect, \"km15ywW3xqkP+139uL0otqSvHIw=\");\n_c = CharacterSelect;\nexport default CharacterSelect;\nvar _c;\n$RefreshReg$(_c, \"CharacterSelect\");","map":{"version":3,"names":["React","useEffect","useState","UserCharacterCard","jsxDEV","_jsxDEV","Fragment","_Fragment","CharacterSelect","user","setSelectedCharacter","_s","showNewCharacterForm","setShowNewCharacterForm","name","setName","errors","setErrors","isLoading","setIsLoading","userCharacterCards","characters","map","character","id","fileName","_jsxFileName","lineNumber","columnNumber","handleNewCharacter","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","r","ok","json","onLogin","err","className","children","onClick","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/home/jessica/Development/code/phase-5/the_forest/client/src/components/CharacterSelect.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport UserCharacterCard from \"./UserCharacterCard\"\n\nfunction CharacterSelect( {user, setSelectedCharacter} ) {\n  const [showNewCharacterForm, setShowNewCharacterForm] = useState(false)\n  const [name, setName] = useState('')\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n\n  // console.log(user.characters)\n  const userCharacterCards = (user.characters.map(character => <UserCharacterCard key={character.id} character={character} setSelectedCharacter={setSelectedCharacter}/>))\n\n\n  function handleNewCharacter(e) {\n    e.preventDefault();\n    setIsLoading(true);\n    fetch(\"/characters\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ name }),\n    }).then((r) => {\n      setIsLoading(false);\n      if (r.ok) {\n        r.json().then((user) => onLogin(user));\n      } else {\n        r.json().then((err) => setErrors(err.errors));\n      }\n    });\n  }\n\n  return (\n    <div className=\"account\">\n      <h2>Your Playthroughs</h2>\n      {userCharacterCards}\n      <button onClick={setShowNewCharacterForm(true)}>New Playthrough</button>\n      {showNewCharacterForm ? \n      <div className=\"new-character-form-div\">\n        <form className=\"new-character-form\">\n          <label>Name:\n            <input \n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </label>\n        </form>\n      </div>\n      : <></>}\n    </div>\n  )\n}\n\nexport default CharacterSelect\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}